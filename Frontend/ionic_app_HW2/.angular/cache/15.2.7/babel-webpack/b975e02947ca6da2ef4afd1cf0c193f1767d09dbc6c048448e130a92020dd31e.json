{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class DataServiceService {\n  constructor() {\n    const FoodInfo = localStorage.getItem(\"Restaurant\");\n    if (FoodInfo) {\n      this.Restaurant = JSON.parse(FoodInfo);\n    } else {\n      this.Restaurant = [{\n        RID: 1,\n        RName: 'Manhatten Hotel',\n        RImage: 'assets/images/manhatten hotel.jpg',\n        RType: 'Hotel',\n        RDistance: 0.7,\n        RPrice: 85,\n        RDelFee: 30,\n        RTime: 25\n      }, {\n        RID: 2,\n        RName: 'TASHAS',\n        RImage: 'assets/images/pasta.jpg',\n        RType: 'Italian',\n        RRating: 4.8,\n        RDistance: 6.2,\n        RPrice: 105,\n        RDelFee: 30,\n        RTime: 30\n      }, {\n        RID: 3,\n        RName: 'CHIAPAS',\n        RImage: 'assets/images/burrito-bowl.jpg',\n        RType: 'Mexican',\n        RRating: 4.3,\n        RDistance: 2.3,\n        RPrice: 100,\n        RDelFee: 30,\n        RTime: 15\n      }, {\n        RID: 4,\n        RName: 'SPUR',\n        RImage: 'assets/images/wings.jpg',\n        RType: 'American',\n        RRating: 3.7,\n        RDistance: 0.5,\n        RPrice: 89,\n        RDelFee: 30,\n        RTime: 35\n      }\n      // {\n      //   RID:5,RName:'SALSA',RImage:'assets/images/tacos.jpg',\n      //   RType:'Tacos', RRating:3.7, RDistance: 2.5, RPrice:70, RDelFee:40\n      // }\n      ];\n\n      this.RestaurantSAVE();\n    }\n  }\n  //this gets the restaurants \n  RestaurantGET() {\n    return this.Restaurant;\n  }\n  RestaurantGETbyID(ID) {\n    return this.Restaurant.find(food => food.RID === ID);\n  }\n  // RestaurantbyID(ID:number):Observable<any>\n  // {\n  //   let FoodInfo:Restaurants[]=[];\n  //   if(localStorage.getItem('FoodInfo'))\n  //   {\n  //     FoodInfo =JSON.parse(localStorage.getItem('FoodInfo')!)\n  //   }\n  //   let ResFood:any=FoodInfo.find(ResFood => ResFood.RID ===ID)\n  //   return (ResFood)\n  // }\n  RestaurantSAVE() {\n    localStorage.setItem('Resturants', JSON.stringify(this.Restaurant));\n  }\n  // RestaurantSEARCH(rName:string, rType:string,rRating:number,rDistance:number,rPrice:number):Restaurants[]{\n  //   let findRest = this.Restaurant;\n  //   if(rName)\n  //   {\n  //     findRest=findRest.filter(a=>a.RName.toLowerCase().includes(rName.toLowerCase()));\n  //   }\n  //   if(rType)\n  //   {\n  //     findRest=findRest.filter(a=>a.RType.toLowerCase().includes(rType.toLowerCase()));\n  //   }\n  //   if(rDistance)\n  //   {\n  //     findRest=findRest.filter(a=>a.RDistance<=rDistance);\n  //   }\n  //   if(rType)\n  //   {\n  //     findRest=findRest.filter(a=>a.RType.toLowerCase().includes(rType.toLowerCase()));\n  //   }\n  //   if(rPrice)\n  //   {\n  //     findRest=findRest.filter(a=>a.RDistance<=rPrice);\n  //   }\n  //   return findRest;\n  // }\n  //save the updated cart items array into the local storage\n  // CartADD(Restaurant: Restaurants) {\n  //   let theCart = localStorage.getItem('Cart');\n  //   let CartItems: any[] = [];\n  //   if (theCart) {\n  //     CartItems = JSON.parse(theCart);\n  //   }\n  //   CartItems.push({ ...Restaurant, ID: Restaurant.RID.toString() });\n  //   localStorage.setItem('Cart', JSON.stringify(CartItems));\n  // }\n  CartADD(Restaurant) {\n    let theCart = localStorage.getItem('Cart');\n    let CartItems = [];\n    if (theCart) {\n      CartItems = JSON.parse(theCart);\n    }\n    if (!Array.isArray(CartItems)) {\n      CartItems = [];\n    }\n    CartItems.push({\n      ...Restaurant,\n      ID: Restaurant.RID.toString()\n    });\n    localStorage.setItem('Cart', JSON.stringify(CartItems));\n  }\n  CartSAVE(Cart) {\n    let CartTotal = [];\n    let Total = 0;\n    for (let x = 0; x < Cart.length; x++) {\n      let FoodPrice = Cart[x].RPrice + Cart[x].RDelFee;\n      Total += FoodPrice;\n      CartTotal.push({\n        ...Cart[x],\n        FoodPrice\n      });\n    }\n    return Total;\n  }\n  CartDELETE(rID) {\n    let theCart = localStorage.getItem('Cart');\n    if (theCart) {\n      if (theCart) {\n        const itemcart = JSON.parse(theCart);\n        const iditem = itemcart.findIndex(id => id === rID);\n        if (iditem !== -1) {\n          itemcart.splice(iditem, 1);\n          localStorage.setItem('cart', JSON.stringify(itemcart));\n        }\n      }\n    }\n  }\n}\nDataServiceService.ɵfac = function DataServiceService_Factory(t) {\n  return new (t || DataServiceService)();\n};\nDataServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataServiceService,\n  factory: DataServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["DataServiceService","constructor","FoodInfo","localStorage","getItem","Restaurant","JSON","parse","RID","RName","RImage","RType","RDistance","RPrice","RDelFee","RTime","RRating","RestaurantSAVE","RestaurantGET","RestaurantGETbyID","ID","find","food","setItem","stringify","CartADD","theCart","CartItems","Array","isArray","push","toString","CartSAVE","Cart","CartTotal","Total","x","length","FoodPrice","CartDELETE","rID","itemcart","iditem","findIndex","id","splice","factory","providedIn"],"sourceRoot":"","sources":["C:\\MYProjects\\Hackathon\\Frontend\\ionic_app_HW2\\src\\app\\services\\DataService\\data-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport type Restaurants={\r\n  RID:number;\r\n  RImage:string;\r\n  RName:string;\r\n  RDistance:number;\r\n  RType:string;\r\n  // RQuantity:number;\r\n  \r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataServiceService {\r\n private Restaurant: Restaurants[];\r\n  constructor() { \r\n    const FoodInfo= localStorage.getItem(\"Restaurant\");\r\n\r\n    if(FoodInfo)\r\n    {\r\n      this.Restaurant = JSON.parse(FoodInfo);\r\n    }\r\n    else\r\n    {\r\n      this.Restaurant =[\r\n        {\r\n          RID:1,RName:'Manhatten Hotel',RImage:'assets/images/manhatten hotel.jpg',\r\n          RType:'Hotel', RDistance: 0.7, RPrice:85, RDelFee:30, RTime:25\r\n        },\r\n        {\r\n          RID:2,RName:'TASHAS',RImage:'assets/images/pasta.jpg',\r\n          RType:'Italian', RRating:4.8, RDistance: 6.2, RPrice:105, RDelFee:30,RTime:30\r\n        },\r\n        {\r\n          RID:3,RName:'CHIAPAS',RImage:'assets/images/burrito-bowl.jpg',\r\n          RType:'Mexican', RRating:4.3, RDistance: 2.3, RPrice:100, RDelFee:30, RTime:15\r\n        },\r\n        {\r\n          RID:4,RName:'SPUR',RImage:'assets/images/wings.jpg',\r\n          RType:'American', RRating:3.7, RDistance: 0.5, RPrice:89, RDelFee:30,RTime:35\r\n        }\r\n        // {\r\n        //   RID:5,RName:'SALSA',RImage:'assets/images/tacos.jpg',\r\n        //   RType:'Tacos', RRating:3.7, RDistance: 2.5, RPrice:70, RDelFee:40\r\n        // }\r\n      ];\r\n      this.RestaurantSAVE();\r\n    }\r\n  }\r\n  \r\n//this gets the restaurants \r\n\r\n  RestaurantGET():Restaurants[]\r\n  {\r\n    return this.Restaurant;\r\n  }\r\n  RestaurantGETbyID(ID:number):Restaurants|undefined {\r\n    return this.Restaurant.find((food:Restaurants)=> food.RID === ID);\r\n}\r\n\r\n  // RestaurantbyID(ID:number):Observable<any>\r\n  // {\r\n  //   let FoodInfo:Restaurants[]=[];\r\n  //   if(localStorage.getItem('FoodInfo'))\r\n  //   {\r\n  //     FoodInfo =JSON.parse(localStorage.getItem('FoodInfo')!)\r\n  //   }\r\n  //   let ResFood:any=FoodInfo.find(ResFood => ResFood.RID ===ID)\r\n  //   return (ResFood)\r\n  // }\r\n\r\nRestaurantSAVE()\r\n{\r\n  localStorage.setItem('Resturants', JSON.stringify(this.Restaurant));\r\n}\r\n\r\n// RestaurantSEARCH(rName:string, rType:string,rRating:number,rDistance:number,rPrice:number):Restaurants[]{\r\n//   let findRest = this.Restaurant;\r\n//   if(rName)\r\n//   {\r\n//     findRest=findRest.filter(a=>a.RName.toLowerCase().includes(rName.toLowerCase()));\r\n//   }\r\n//   if(rType)\r\n//   {\r\n//     findRest=findRest.filter(a=>a.RType.toLowerCase().includes(rType.toLowerCase()));\r\n//   }\r\n//   if(rDistance)\r\n//   {\r\n//     findRest=findRest.filter(a=>a.RDistance<=rDistance);\r\n//   }\r\n//   if(rType)\r\n//   {\r\n//     findRest=findRest.filter(a=>a.RType.toLowerCase().includes(rType.toLowerCase()));\r\n//   }\r\n//   if(rPrice)\r\n//   {\r\n//     findRest=findRest.filter(a=>a.RDistance<=rPrice);\r\n//   }\r\n//   return findRest;\r\n\r\n// }\r\n\r\n//save the updated cart items array into the local storage\r\n// CartADD(Restaurant: Restaurants) {\r\n//   let theCart = localStorage.getItem('Cart');\r\n//   let CartItems: any[] = [];\r\n\r\n//   if (theCart) {\r\n//     CartItems = JSON.parse(theCart);\r\n//   }\r\n\r\n//   CartItems.push({ ...Restaurant, ID: Restaurant.RID.toString() });\r\n//   localStorage.setItem('Cart', JSON.stringify(CartItems));\r\n// }\r\n\r\nCartADD(Restaurant: Restaurants) {\r\n  let theCart = localStorage.getItem('Cart');\r\n  let CartItems: any[] = [];\r\n\r\n  if (theCart) {\r\n    CartItems = JSON.parse(theCart);\r\n  }\r\n\r\n  if (!Array.isArray(CartItems)) {\r\n    CartItems = [];\r\n  }\r\n\r\n  CartItems.push({ ...Restaurant, ID: Restaurant.RID.toString() });\r\n  localStorage.setItem('Cart', JSON.stringify(CartItems));\r\n}\r\n\r\nCartSAVE(Cart: Restaurants[]): number {\r\n  let CartTotal = [];\r\n  let Total = 0;\r\n\r\n  for (let x = 0; x < Cart.length; x++) {\r\n    let FoodPrice = Cart[x].RPrice + Cart[x].RDelFee;\r\n    Total += FoodPrice;\r\n    CartTotal.push({ ...Cart[x], FoodPrice });\r\n  }\r\n  \r\n  return Total;\r\n}\r\n CartDELETE(rID:number):void\r\n {\r\n  let theCart=localStorage.getItem('Cart');\r\n  if(theCart)\r\n  {\r\n    if (theCart) {\r\n      const itemcart = JSON.parse(theCart);\r\n      const iditem = itemcart.findIndex((id: number) => id === rID);\r\n      if (iditem !== -1) {\r\n        itemcart.splice(iditem, 1);\r\n        localStorage.setItem('cart', JSON.stringify(itemcart));\r\n      }\r\n  }\r\n }\r\n\r\n\r\n}\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}